% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/projectKNNs.R
\name{projectKNNs}
\alias{projectKNNs}
\title{Project a distance matrix into a lower-dimensional space.}
\usage{
projectKNNs(wij, dim = 2, sgd_batches = (length(wij@p) - 1) * 20000,
  M = 5, weight_pos_samples = TRUE, gamma = 7, alpha = 1, rho = 1,
  coords = NULL, min_rho = 0, verbose = TRUE)
}
\arguments{
\item{wij}{A symmetric sparse matrix of edge weights, in C-compressed format, as created with the \code{Matrix} package.}

\item{dim}{The number of dimensions for the projection space.}

\item{sgd_batches}{The number of edges to process during SGD; defaults to 20000 * the number of rows in x, as recommended
by the paper authors.}

\item{M}{The number of negative edges to sample for each positive edge.}

\item{weight_pos_samples}{Whether to sample positive edges according to their edge weights (the default) or take the
weights into account when calculating gradient.  See also the Details section.}

\item{gamma}{The strength of the force pushing non-neighbor nodes apart.}

\item{alpha}{Hyperparameter used in the default distance function, \eqn{1 / (1 + \alpha \dot ||y_i - y_j||^2)}.  The function relates the distance
between points in the low-dimensional projection to the likelihood that the two points are nearest neighbors. Increasing \eqn{\alpha} tends
to push nodes and their neighbors closer together; decreasing \eqn{\alpha} produces a broader distribution. Setting \eqn{\alpha} to zero
enables the alternative distance function. \eqn{\alpha} below zero is meaningless.}

\item{rho}{Initial learning rate.}

\item{coords}{An initialized coordinate matrix.}

\item{min_rho}{Final learning rate.}

\item{verbose}{Verbosity}
}
\value{
A dense [N,D] matrix of the coordinates projecting the w_ij matrix into the lower-dimensional space.
}
\description{
Takes as input a sparse matrix of the edge weights connecting each node to its nearest neighbors, and outputs
a matrix of coordinates embedding the inputs in a lower-dimensional space.
}
\details{
The algorithm attempts to estimate a \code{dim}-dimensional embedding using stochastic gradient descent and
negative sampling.

The objective function is: \deqn{ O = \sum_{(i,j)\in E} w_{ij} (\log f(||p(e_{ij} = 1||) + \sum_{k=1}^{M} E_{jk~P_{n}(j)} \gamma \log(1 - f(||p(e_{ij_k} - 1||)))}
where \eqn{f()} is a probabilistic function relating the distance between two points in the low-dimensional projection space,
and the probability that they are nearest neighbors.

The default probabilistic function is \eqn{1 / (1 + \alpha \dot ||x||^2)}. If \eqn{\alpha} is set to zero,
an alternative probabilistic function, \eqn{1 / (1 + \exp(x^2))} will be used instead.

The \code{weight_pos_samples} parameter controls how to handle edge-weights.  The paper authors recommend using a weighted
sampling approach to select edges, and treating edge-weight as binary in calculating the objective. This is the default.

Note that the input matrix should be symmetric.  If any columns in the matrix are empty, the function will fail.
}
\examples{
\dontrun{
data(wiki)
coords <- projectKNNs(wiki)
coords <- t(coords)
plot(coords, xlim = c(-1.5,1.5), ylim = c(-1.5,1.5))
}
}

